---
import Footer from "../components/Footer.astro";
import Navigation from "../components/Navigation.astro";
import Notice from "../components/Notice.astro";
import { DATA } from "../data/data";
import CommonHead from "../components/CommonHead.astro";
import ButtonUp from "../components/ButtonUp.astro";

export interface Props {
  title: string;
  lang: string;
  description: string;
}

const { title, lang, description } = Astro.props;
---

<!DOCTYPE html>
<html lang={lang}>
  <CommonHead title={title} description={description} />
  <body
    class="bg-light-background dark:bg-dark-background text-dark-background dark:text-light-background"
  >
    {DATA.welcomeBanner.isEnabled && <Notice />}
    <div class="overflow-hidden min-h-screen flex flex-col justify-between">
      <div>
        <Navigation />
        <slot />
      </div>
      <ButtonUp class="fixed bottom-1 right-1" />
      <Footer />
    </div>
    <script>
      function listenToDarkMode() {
        const html = document.documentElement;
        if (!!localStorage.getItem("dark")) {
          html.classList.add("dark");
        }
      }

      function listenAnimations() {
        const animations = [...document.querySelectorAll(".animate")];
        const callback = (
          entries: IntersectionObserverEntry[],
          observer: IntersectionObserver,
        ) => {
          entries.forEach((entry: IntersectionObserverEntry) => {
            let animationClasses = (
              entry.target.getAttribute("data-animation") ?? ""
            ).split(" ");

            if (entry.isIntersecting) {
              if (
                !entry.target.getAttribute("data-animation-repeat") &&
                entry.target.getAttribute("data-animation-repeated")
              ) {
                observer.unobserve(entry.target);
                return;
              }
              entry.target.setAttribute("data-animation-repeated", "true");
              animationClasses.forEach((className: any) => {
                entry.target.classList.add(className);
              });
              if (entry.target.classList.contains("invisible")) {
                entry.target.classList.remove("invisible");
              }
            } else if (
              !entry.isIntersecting &&
              entry.boundingClientRect.top > 0
            ) {
              animationClasses.forEach((className: any) => {
                entry.target.classList.remove(className);
              });
            }
          });
        };

        const observer = new IntersectionObserver(callback, {
          rootMargin: "200px 0px",
        });

        animations.forEach((animation) => observer.observe(animation));
      }

      function init() {
        listenToDarkMode();
        listenAnimations();
      }

      document.addEventListener("astro:page-load", init);
    </script>
  </body>
</html>
